library("devtools")
install_github("jw156605/SLICER")
library(Seurat)
library(readr)
library(tidyverse)
library(HGC)
library(latticeExtra)
library(lattice)
library(RColorBrewer)
library(clusterProfiler)
library(org.Mm.eg.db)
library(AnnotationDbi)
library(ComplexHeatmap)
library(dendextend)
library('fastcluster')
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("clusterProfiler")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("AnnotationDbi")
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("org.Mm.eg.db")
exp = read_csv("normalized_data.csv")
exp = discard(exp,~all(is.na(.) |.  == ""))
exp = distinct(exp, `...1`, .keep_all = TRUE)
# filtering out the reprogramming transcription factors
exp = filter(exp, !`...1`%in% c("Mef2c", "Gata4", "Tbx5"))
exp = column_to_rownames(exp, var="...1")
exp_log2 = log2(exp)
exp_log2[exp_log2 < 0] <- 0
exp_log2_mat = as.matrix(exp_log2)
s = CreateSeuratObject(counts = exp)
#s = NormalizeData(s)
s = SetAssayData(object = s, slot = "scale.data", new.data = exp_log2_mat)
s <- FindVariableFeatures(s, selection.method = "vst", nfeatures = 10000)
#s = ScaleData(s, features = rownames(s))
s = RunPCA(s, features  = VariableFeatures(s))
our_genes = s[["pca"]]@feature.loadings %>%
data.frame() %>%
dplyr::select(PC_1, PC_2, PC_3, PC_4) %>%
mutate(PC_1 = abs(PC_1), PC_2 = abs(PC_2), PC_3 = abs(PC_3), max = pmax(PC_1, PC_2,PC_3), sum = PC_1 + PC_2 + PC_3) %>%
slice_max(order_by = max, n = 400) %>%
row.names() %>%
sort()
capture.output(our_genes, file = "top_genes.txt", row.names = FALSE)
# PC_1 = PC_1 / sum(PC_1), PC_2 = PC_2 / sum(PC_2), PC_3 = PC_3 / sum(PC_3),
correct_genes = read_csv("correct_genes.csv", col_names = FALSE)
(our_genes %in% correct_genes$X1) %>% mean()
top_genes_scale = scale(top_genes)
our_genes = s[["pca"]]@feature.loadings %>%
data.frame() %>%
dplyr::select(PC_1, PC_2, PC_3, PC_4) %>%
mutate(PC_1 = abs(PC_1), PC_2 = abs(PC_2), PC_3 = abs(PC_3), max = pmax(PC_1, PC_2,PC_3), sum = PC_1 + PC_2 + PC_3) %>%
slice_max(order_by = max, n = 400) %>%
row.names() %>%
sort()
capture.output(our_genes, file = "top_genes.txt", row.names = FALSE)
# PC_1 = PC_1 / sum(PC_1), PC_2 = PC_2 / sum(PC_2), PC_3 = PC_3 / sum(PC_3),
correct_genes = read_csv("correct_genes.csv", col_names = FALSE)
(our_genes %in% correct_genes$X1) %>% mean()
top_genes = exp_log2[our_genes,] %>% data.frame()
top_genes = t(top_genes)
top_genes_scale = scale(top_genes)
row_dend = hclust(dist(top_genes_scale)) # row clustering
col_dend = hclust(dist(t(top_genes_scale))) # column clustering
clusters <- cutree(col_dend, k = 3)
cluster1 = colnames(top_genes_scale)[clusters == 1]
GO_results_cluster1 <- enrichGO(gene = cluster1, OrgDb = "org.Mm.eg.db", keyType = "SYMBOL", ont = "BP")
as.data.frame(GO_results_cluster1)
cluster2 = colnames(top_genes_scale)[clusters == 2]
GO_results_cluster2 <- enrichGO(gene = cluster2, OrgDb = "org.Mm.eg.db", keyType = "SYMBOL", ont = "BP")
as.data.frame(GO_results_cluster2)
cluster3 = colnames(top_genes_scale)[clusters == 3]
GO_results_cluster3 <- enrichGO(gene = cluster3, OrgDb = "org.Mm.eg.db", keyType = "SYMBOL", ont = "BP")
as.data.frame(GO_results_cluster3)
fit <- plot(barplot(GO_results_cluster1, showCategory = 15))
fit <- plot(barplot(GO_results_cluster2, showCategory = 15))
fit <- plot(barplot(GO_results_cluster3, showCategory = 15))
gene_labeling = data.frame(matrix(ncol = 1, nrow = length(colnames(top_genes_scale))))
colnames(gene_labeling) = "label"
rownames(gene_labeling) = colnames(top_genes_scale)
gene_labeling[cluster1,] = "fibroblast"
gene_labeling[cluster3,] = "cardiomyocyte"
gene_labeling[cluster2,] = "cell cycle"
gene_labeling[col.ord, ]
col.ord = order.dendrogram(col_dend)
dd.col = as.dendrogram(col_dend)
col.ord = order.dendrogram(dd.col)
fit <- plot(barplot(GO_results_cluster1, showCategory = 15))
fit <- plot(barplot(GO_results_cluster2, showCategory = 15))
fit <- plot(barplot(GO_results_cluster3, showCategory = 15))
gene_labeling = data.frame(matrix(ncol = 1, nrow = length(colnames(top_genes_scale))))
colnames(gene_labeling) = "label"
rownames(gene_labeling) = colnames(top_genes_scale)
gene_labeling[cluster1,] = "fibroblast"
gene_labeling[cluster3,] = "cardiomyocyte"
gene_labeling[cluster2,] = "cell cycle"
gene_labeling[col.ord, ]
gene_labeling['Ect2',]
Heatmap(t(top_genes_scale), name = "test",
cluster_rows = color_branches(col_dend, k = 3),
cluster_columns = color_branches(row_dend, k = 2), show_row_names = FALSE, show_column_names = FALSE)
library(lattice)
library("devtools")
install_github("jw156605/SLICER")
library(Seurat)
library(readr)
library(tidyverse)
library(HGC)
library(latticeExtra)
library(lattice)
library(RColorBrewer)
library(clusterProfiler)
library(org.Mm.eg.db)
library(AnnotationDbi)
seurat.obj = CreateSeuratObject(counts = exp)
seurat.obj = NormalizeData(seurat.obj)
seurat.obj = FindVariableFeatures(seurat.obj, selection.method =  "vst", nfeatures = 10000)
all.genes = rownames(seurat.obj)
seurat.obj = ScaleData(seurat.obj, features = all.genes)
seurat.obj = RunPCA(seurat.obj, features =  VariableFeatures(s))
ElbowPlot(seurat.obj)
seurat.obj = FindNeighbors(seurat.obj, dims = 1:15)
seurat.obj = FindClusters(seurat.obj, resolution = 1.75)
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE)
condition = DimPlot(seurat.obj, group.by = "cc", label = TRUE)
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE)
condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE)
library("devtools")
install_github("jw156605/SLICER")
library(Seurat)
library(readr)
library(tidyverse)
library(HGC)
library(latticeExtra)
library(lattice)
library(RColorBrewer)
library(clusterProfiler)
library(org.Mm.eg.db)
library(AnnotationDbi)
seurat.obj = CreateSeuratObject(counts = exp)
seurat.obj = NormalizeData(seurat.obj)
seurat.obj = FindVariableFeatures(seurat.obj, selection.method =  "vst", nfeatures = 10000)
all.genes = rownames(seurat.obj)
seurat.obj = ScaleData(seurat.obj, features = all.genes)
seurat.obj = RunPCA(seurat.obj, features =  VariableFeatures(seurat.obj))
ElbowPlot(seurat.obj)
seurat.obj = FindNeighbors(seurat.obj, dims = 1:15)
seurat.obj = FindClusters(seurat.obj, resolution = 1.75)
identified_cells = read.csv("paper_cell_states.csv", row.names = 1, header=TRUE)
identified_cells = identified_cells[match(rownames(seurat.obj@meta.data), rownames(identified_cells)),]
seurat.obj@meta.data$cc_paper = identified_cells$CC
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE)
condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE)
condition|clusters
view(seurat.obj@meta.data)
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE)
condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE)
condition|clusters
Idents(seurat.obj)  = "RNA_snn_res.1.75"
seurat.obj = RunUMAP(seurat.obj, dims = 1:15)
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE, reduction = "umap")
condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE, reduction = "umap")
condition|clusters
seurat.obj = RunTSNE(seurat.obj, dims = 1:15)
DimPlot(seurat.obj, reduction = "tsne", group.by = 'RNA_snn_res.1.75')
markers = FindAllMarkers(seurat.obj, logfc.threshold =  0.25, min.pct = 0.1, only.pos = FALSE, test.use = 'MAST')
top_markers = markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
FeaturePlot(seurat.obj, features = c("Dhrs3"), min.cutoff = 'q10')
VlnPlot(seurat.obj, features = c("Rbp1", "Dhrs3"))
VlnPlot(seurat.obj, features = c("Fstl1", "Bgn"))
VlnPlot(seurat.obj, features = c("Serpinh1", "Dsp"))
VlnPlot(seurat.obj, features = c("Prc1", "Birc5"))
## cell cycle
s.genes <- str_to_title(cc.genes$s.genes)
g2m.genes <- str_to_title(cc.genes$g2m.genes)
seurat.obj = CellCycleScoring(seurat.obj, s.features = s.genes, g2m.features = g2m.genes)
clusters = DimPlot(seurat.obj, group.by = "cc", label = TRUE, reduction = "umap")
real_condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE, reduction = "umap")
clusters|real_condition
seurat_normalized = as.data.frame(GetAssayData(object = seurat.obj, slot = "data"))
seurat_normalized["Top2a", ]
seurat.sc = CreateSeuratObject(counts = exp)
seurat.sc = SCTransform(seurat.sc)
seurat.sc = RunPCA(seurat.sc, features =  VariableFeatures(seurat.sc))
identified_cells = identified_cells[match(rownames(seurat.sc@meta.data), rownames(identified_cells)),]
seurat.sc@meta.data$cc_paper = identified_cells$CC
seurat.sc = RunUMAP(seurat.sc, dims = 1:15)
seurat.sc = FindNeighbors(seurat.sc, dims = 1:15)
seurat.sc = FindClusters(seurat.sc, resolution = 1.75)
seurat.sc = CellCycleScoring(seurat.sc, s.features = s.genes, g2m.features = g2m.genes)
clusters = DimPlot(seurat.sc, group.by = "SCT_snn_res.1.75", label = TRUE, reduction = "umap")
real_condition = DimPlot(seurat.sc, group.by = "cc_paper", label = TRUE, reduction = "umap")
phase = DimPlot(seurat.sc, group.by = "Phase", label = TRUE, reduction = "umap")
clusters|real_condition|phase
seurat.obj@meta.data$cat_paper = identified_cells$stage
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE)
condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE)
categories = DimPlot(seurat.obj, group.by = "cat_paper", label = TRUE)
condition|clusters|categories
seurat.sc@meta.data$cat_paper = identified_cells$stage
cat = DimPlot(seurat.sc, group.by = "cat_paper", label = TRUE, reduction = "umap")
clusters|real_condition|phase|cat
clusters = DimPlot(seurat.sc, group.by = "SCT_snn_res.1.75", label = TRUE, reduction = "umap")
clusters|real_condition|phase|cat
cell_clusters <- cutree(row_dend, k = 3)
active_cells = rownames(top_genes_scale)[cell_clusters == 1]
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE, reduction = "umap")
real_condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE, reduction = "umap")
phase = DimPlot(seurat.obj, group.by = "Phase", label = TRUE, reduction = "umap")
cat = DimPlot(seurat.obj, group.by = "cat_paper", label = TRUE, reduction = "umap")
clusters|real_condition|phase|cat
seurat.obj@meta.data$cc_hclust = "CCI"
seurat.obj@meta.data[active_cells,]$cc_hclust = "CCA"
clusters = DimPlot(seurat.obj, group.by = "RNA_snn_res.1.75", label = TRUE, reduction = "umap")
real_condition = DimPlot(seurat.obj, group.by = "cc_paper", label = TRUE, reduction = "umap")
phase = DimPlot(seurat.obj, group.by = "Phase", label = TRUE, reduction = "umap")
cat = DimPlot(seurat.obj, group.by = "cc_hclust", label = TRUE, reduction = "umap")
clusters|real_condition|phase|cat
subset(x = seurat.obj, subset = cc_hclust == "CCI")
subset(x = seurat.obj, subset = cc_hclust == "CCA")
cca_seurat = subset(x = seurat.obj, subset = cc_hclust == "CCI")
ElbowPlot(cci_seurat)
cci_seurat = subset(x = seurat.obj, subset = cc_hclust == "CCI")
ElbowPlot(cci_seurat)
cci_seurat = FindNeighbors(cci_seurat, dims = 1:15)
cci_seurat = FindClusters(cci_seurat, resolution = 0.5)
cci_seurat = FindNeighbors(cci_seurat, dims = 1:15)
cci_seurat = FindClusters(cci_seurat, resolution = 0.7)
cci_seurat = FindNeighbors(cci_seurat, dims = 1:15)
cci_seurat = FindClusters(cci_seurat, resolution = 1)
cci_seurat = FindClusters(cci_seurat, resolution = 1)
DimPlot(cci_seurat, group_by = "RNA_snn_res.0.7",label = TRUE,)
DimPlot(cci_seurat, group_by = "RNA_snn_res.0.7",label = TRUE)
view(cci_seurat@meta.data)
DimPlot(cci_seurat, group.by = "RNA_snn_res.0.7",label = TRUE)
DimPlot(cci_seurat, group.by = "RNA_snn_res.1",label = TRUE)
DimPlot(seurat.obj, group.by = "cat_paper", label = TRUE)
DimPlot(cci_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cl= DimPlot(cci_seurat, group.by = "RNA_snn_res.1",label = TRUE)
pap = DimPlot(cci_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cci_markers = FindAllMarkers(cci_seurat, logfc.threshold =  0.25, min.pct = 0.1, only.pos = FALSE, test.use = 'MAST')
top_markers = cci_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
View(top_markers)
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
View(cci_top_markers)
FeaturePlot(seurat.obj, features = cci_top_markers, min.cutoff = 'q10')
View(cci_top_markers)
FeaturePlot(seurat.obj, features = cci_top_markers$gene, min.cutoff = 'q10')
View(cci_top_markers)
View(cci_markers)
View(cci_markers)
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = p_val_adj)
FeaturePlot(seurat.obj, features = cci_top_markers$gene, min.cutoff = 'q10')
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = p_val_adj)
View(cci_top_markers)
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_min(n = 2, order_by = p_val_adj)
FeaturePlot(seurat.obj, features = cci_top_markers$gene, min.cutoff = 'q10')
VlnPlot(seurat.obj, features = c("Fstl1", "Bgn"))
VlnPlot(seurat.obj, features = c("Zfp36l1", "Lox"))
VlnPlot(seurat.obj, features = c("Serpinh1", "Dsp"))
VlnPlot(seurat.obj, features = c("Clca2", "Rbp1"))
VlnPlot(cci_seurat, features = c("Fstl1", "Bgn"))
VlnPlot(cci_seurat, features = c("Zfp36l1", "Lox"))
VlnPlot(cci_seurat, features = c("Serpinh1", "Dsp"))
VlnPlot(cci_seurat, features = c("Clca2", "Rbp1"))
cci_top_markers = cci_markers %>%
group_by(cluster) %>%
slice_min(n = 5, order_by = p_val_adj)
View(cci_top_markers)
VlnPlot(cci_seurat, features = c("Fstl1", "Bgn"))
VlnPlot(cci_seurat, features = c("Tnni3", "Smpx"))
VlnPlot(cci_seurat, features = c("Serpinh1", "Dsp"))
VlnPlot(cci_seurat, features = c("Clca2", "Rbp1"))
VlnPlot(cci_seurat, features = c("Fstl1", "Bgn"))
VlnPlot(cci_seurat, features = c("Tnni3", "Smpx"))
VlnPlot(cci_seurat, features = c("Serpinh1", "Dsp"))
VlnPlot(cci_seurat, features = c("Clca2", "Rbp1"))
VlnPlot(cci_seurat, features = c("Cfh", "B4galt1"))
Idents(cci_seurat)  = "RNA_snn_res.1"
RenameIdents(cci_seurat, `0` = "iCM")
Idents(cci_seurat)  = "RNA_snn_res.1"
cci_seurat = RenameIdents(cci_seurat, `0` = "iCM")
Idents(cci_seurat)  = "RNA_snn_res.1"
cci_seurat = RenameIdents(cci_seurat, `0` = "iCM")
cci_seurat = RenameIdents(cci_seurat, `1` = "Fib")
cci_seurat = RenameIdents(cci_seurat, `2` = "piCM")
cci_seurat = RenameIdents(cci_seurat, `3` = "iFib")
DimPlot(cci_seurat, label = TRUE)
cca_seurat = FindNeighbors(cca_seurat, dims = 1:15)
cca_seurat = FindClusters(cca_seurat, resolution = 1)
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1",label = TRUE)
pap = DimPlot(cca_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cca_seurat = subset(x = seurat.obj, subset = cc_hclust == "CCA")
cca_seurat = FindNeighbors(cca_seurat, dims = 1:15)
cca_seurat = FindClusters(cca_seurat, resolution = 1)
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1",label = TRUE)
pap = DimPlot(cca_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cca_seurat = FindClusters(cca_seurat, resolution = 1.5)
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1",label = TRUE)
pap = DimPlot(cca_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1.5",label = TRUE)
pap = DimPlot(cca_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cca_seurat = FindClusters(cca_seurat, resolution = 1.25)
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1.25",label = TRUE)
cl|pap
cca_seurat = FindClusters(cca_seurat, resolution = 1)
cl= DimPlot(cca_seurat, group.by = "RNA_snn_res.1",label = TRUE)
pap = DimPlot(cca_seurat, group.by = "cat_paper", label = TRUE)
cl|pap
cca_markers = FindAllMarkers(cca_seurat, logfc.threshold =  0.25, min.pct = 0.1, only.pos = FALSE, test.use = 'MAST')
cca_top_markers = cca_markers %>%
group_by(cluster) %>%
slice_min(n = 5, order_by = p_val_adj)
View(dd.col)
View(cca_top_markers)
VlnPlot(cca_seurat, features = c("Dab2", "Kcnab1"))
VlnPlot(cca_seurat, features = c("Cenpf", "Pttg1"))
VlnPlot(cca_seurat, features = c("Upk1b", "Timp3"))
Idents(cca_seurat)  = "RNA_snn_res.1"
cca_seurat = RenameIdents(cca_seurat, `0` = "iCM")
cca_seurat = RenameIdents(cca_seurat, `1` = "iFib")
cca_seurat = RenameIdents(cca_seurat, `2` = "Fib")
DimPlot(cca_seurat, label = TRUE)
# loading in SLICER packages
library("devtools")
install_github("jw156605/SLICER")
library(SLICER)
library(lle)
# finding the number of initial clusters for reconstructing the trajectory
k = select_k(top_genes_scale, kmin = 3)
# performing LLE a form of dimensionality reduction on the gene expression data
# m = 3 bc that is the number of dimensions used in the figures in the paper
traj_lle = lle(top_genes_norm, m=3, k)$Y
# performing LLE a form of dimensionality reduction on the gene expression data
# m = 3 bc that is the number of dimensions used in the figures in the paper
traj_lle = lle(top_genes_scale, m=3, k)$Y
# build a knearest neighbor graph to find the distances betwen cells
traj_graph = conn_knn_graph(traj_lle, k)
# constructing the cell order and finding branches in the trajectory
ends = find_extreme_cells(traj_graph, traj_lle)
start = 1 # needs to be changed to a known cardiac fibroblast
cells_ordered = cell_order(traj_graph, start)
graph_process_distance(traj_graph,traj_lle,start)
branches = assign_branches(traj_graph,start, min_branch_len = 30)
distances = process_distance(traj_graph, 192)
scatterplot3d(traj_lle[,1],traj_lle[,3],traj_lle[,2], grid = FALSE)
library(rgl)
library(plotly)
distances = process_distance(traj_graph, 192)
scatterplot3d(traj_lle[,1],traj_lle[,3],traj_lle[,2], grid = FALSE)
library(rgl)
library(plotly)
plot3d(traj_lle[,1],traj_lle[,3],traj_lle[,2],type = "s", size = 1, lit = TRUE)
lle_df = data.frame(traj_lle )
lle_df$dist = as.double(t(distances))
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3, marker = list(color = ~dist, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(aspectmode = "cube"))
fig
plot(traj_lle,pch=16,col=branches)
# performing LLE a form of dimensionality reduction on the gene expression data
# m = 3 bc that is the number of dimensions used in the figures in the paper
traj_lle = lle(top_genes, m=3, k)$Y
# finding the number of initial clusters for reconstructing the trajectory
k = select_k(top_genes, kmin = 3)
# performing LLE a form of dimensionality reduction on the gene expression data
# m = 3 bc that is the number of dimensions used in the figures in the paper
traj_lle = lle(top_genes, m=3, k)$Y
# build a knearest neighbor graph to find the distances betwen cells
traj_graph = conn_knn_graph(traj_lle, k)
ends = find_extreme_cells(traj_graph, traj_lle)
start = 1 # needs to be changed to a known cardiac fibroblast
cells_ordered = cell_order(traj_graph, start)
graph_process_distance(traj_graph,traj_lle,start)
distances = process_distance(traj_graph, 192)
scatterplot3d(traj_lle[,1],traj_lle[,3],traj_lle[,2], grid = FALSE)
library(rgl)
library(plotly)
plot3d(traj_lle[,1],traj_lle[,3],traj_lle[,2],type = "s", size = 1, lit = TRUE)
branches = assign_branches(traj_graph,start, min_branch_len = 30)
graph_process_distance(traj_graph,traj_lle,start)
lle_df = data.frame(traj_lle )
lle_df$dist = as.double(t(distances))
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3, marker = list(color = ~dist, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(aspectmode = "cube"))
fig
View(traj_lle)
View(traj_graph)
View(distances)
View(distances)
View(top_genes)
View(top_genes)
cells_ordered
View(identified_cells)
identified_cells
identified_cells$GroupID_Fig1a
lle_df$ident = identified_cells$GroupID_Fig1a
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3, marker = list(color = ~ident))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(aspectmode = "cube"))
fig
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(aspectmode = "cube"))
fig
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3, color = ~ident)
fig <- plot_ly(lle_df, x = ~X1, y = ~X2, z = ~X3, color = ~ident)
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(aspectmode = "cube"))
fig
